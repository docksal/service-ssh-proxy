#!/usr/bin/env bash

if [[ "$TERM" != "dumb" ]]; then
	# Console colors
	red='\033[0;91m'
	red_bg='\033[101m'
	yellow_bg='\033[43;90m'
	green='\033[0;32m'
	green_bg='\033[42m'
	yellow='\033[0;33m'
	yellow_bold='\033[1;33m'
	blue='\033[0;34m'
	lime='\033[0;92m'
	acqua='\033[0;96m'
	magenta='\033[0;35m'
	NC='\033[0m'
fi

# Make global direcotry if doesn't exist.
if [[ ! -d "${SSH_PROXY_GLOBAL_KEYS}" ]]; then
	mkdir -p ${SSH_PROXY_GLOBAL_KEYS}
fi

# Make directory if doesn't exist.
if [[ ! -d "${SSH_PROXY_UPSTREAM_WORKINGDIR}" ]]; then
	mkdir -p ${SSH_PROXY_UPSTREAM_WORKINGDIR}
fi

### Functions ###

# (Re)connect proxy to project networks.
# Useful when proxy has been just re-provisioned and should be re-connected to existing project networks.
networks ()
{
	# Filter: primary containers with a defined virtual host
	project_names=$(docker ps \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{.Label "com.docker.compose.project"}}')

	while read project_name; do
		local network="${project_name}_default"
		# Making sure the network exists
		docker network create "$network" >/dev/null 2>&1
		# Reconnect vhost-proxy to the project network (in case vhost-proxy has been recently reset)
		docker network connect "$network" docksal-ssh-proxy >/dev/null 2>&1
		if [[ $? == 0 ]]; then
			log "Connected proxy to network: ${network}."
			log "Adding to ssh proxy: ${network}."
			connect $project_name >/dev/null 2>&1
		fi
	done <<< "$project_names"
}

## Remove all projects that are no longer available.
cleanup ()
{
	log "Removing all non-existent projects"

	while read project_name; do
		if [[ ! -d ${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name} ]]; then
			continue
		fi

		# Get Container Name for CLI
		cli_name=$(docker ps -a \
		  --filter "label=com.docker.compose.project=${project_name}" \
		  --filter "label=com.docker.compose.service=cli" \
		  --format '{{.Names}}');

		# If not found remove from the system.
		if [[ -z "${cli_name}" ]]; then
			remove_project $project_name;
		fi
	done <<< $(ls -1 ${SSH_PROXY_UPSTREAM_WORKINGDIR})
}

# Rebuild the key directory.
rebuild ()
{
	log "Rebuilding all projects"
	cleanup
	networks
}

# Build the Project Name and add the SSH Key
# @param $1 - Project Directory
connect ()
{
	project_name=$1

	# If project_name is empty exit
	if [[ -z $project_name ]]; then
		log "Project name is empty"
		return 0
	fi

	# Get Container Name for CLI
	cli_name=$(docker ps \
		--filter "label=com.docker.compose.project=${project_name}" \
		--filter "label=com.docker.compose.service=cli" \
		--format '{{.Names}}');

	# If cli_name returns empty exit
	if [[ -z $cli_name ]]; then
		log "CLI name empty or not found in project ${project_name}"
		return 0
	fi

	# Create project_directory if doesn't exist.
	project_dir="${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}"
	if [[ ! -d "${project_dir}" ]]; then
		mkdir $project_dir 2>&1
	fi

	# Create project_directory if doesn't exist.
	keys_dir="${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}/keys"
	if [[ ! -d "${keys_dir}" ]]; then
		mkdir $keys_dir 2>&1
	fi

	key_file=${project_dir}/id_rsa
	if [[ ! -f "${key_file}" ]]; then
		ssh-keygen -t rsa -b 4096 -N '' -f "${key_file}" 2>&1
	fi

	upstream_file="${project_dir}/sshpiper_upstream"
	if [[ ! -f "${upstream_file}" ]]; then
		touch "${upstream_file}"
	fi

	echo "${SSH_USER}@${cli_name}" > "${upstream_file}" 2>&1
	chmod 400 "${upstream_file}"

	authorized_keys_file=${project_dir}/authorized_keys
	if [[ ! -f "${authorized_keys_file}" ]]; then
		touch "${authorized_keys_file}"
	fi

	# Set permissions of key file.
	chmod 400 ${key_file} >/dev/null 2>&1

	# Automatically add ssh key to container
	log "Adding ${key_file} to ${SSH_USER}@${cli_name}"
	sshpass -v -e ssh-copy-id -i ${key_file} ${SSH_USER}@${cli_name} >/dev/null 2>&1
}

# Add project to ssh proxy.
# @param $1 - Project Directory
add_project ()
{
	local project_name=$1

	# If project_name is empty don't continue.
	if [[ -z "${project_name}" ]]; then
		return 0
	fi

	# If project_directory doesn't exist exit.
	project_directory="${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}"
	if [[ ! -d "${project_directory}" ]]; then
		return 0
	fi

	log "Adding ${project_name} to ssh proxy"
	connect ${project_name}
}

# Remove project from everything
# @param $1 - Project Directory
remove_project ()
{
	local project_name=$1
	log "Removing ${project_name} from ssh proxy"

	# If project_name is empty exit.
	if [[ -z "${project_name}" ]]; then
		return 0
	fi

	# If project_directory doesn't exist exit.
	project_directory=${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}
	if [[ ! -d ${project_directory} ]]; then
		return 0
	fi

	# Remove project_directory from list.
	rm -rf "${project_directory}" 2>&1
}

# List out all of the projects currently loaded.
list_projects ()
{
	echo "Projects Currently Loaded:"
	while read project_name; do
		echo "- ${project_name}"
	done <<< $(ls -1 ${SSH_PROXY_UPSTREAM_WORKINGDIR})
}

# Run through all projects and add them if they don't exist.
cron ()
{
	log "Running Cron"

	# Filter: primary containers with a defined virtual host
	project_names=$(docker ps \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{.Label "com.docker.compose.project"}}')

	while read project_name; do
		add_project $project_name
	done <<< "$project_names"
	log "Done Running Cron"
}

# Add a Key to the Project
# @param $1 - Project Directory
# @param $2 - SSH Key
# @param $3 - SSH Key Name (Defaults to project-$RANDOM)
add_key ()
{
	project_name=$1
	key=$2
	key_name=${3:-"project-${RANDOM}"}

	# If project_name is empty exit.
	if [[ -z "${project_name}" ]] || [[ -z "${key}" ]]; then
		return 0
	fi

	# Add Project To SSH Proxy
	add_project $project_name

	# If project_directory doesn't exist exit.
	project_directory=${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}
	if [[ ! -d ${project_directory} ]]; then
		return 0
	fi

	keys_dir=${project_directory}/keys
	# Check to see if key already exists.
	if [[ "$(grep -r "${key}" $keys_dir | wc -l | tr -d '[:space:]')" != "0" ]]; then
		log "Key already exists"
		return 0;
	fi

	keys_file=${keys_dir}/${key_name}
	log "Creating ${keys_file}";
	echo "${key}" > $keys_file

	# Rebuild Keys for project.
	rebuild_project_keys $project_name
	log "Added key to ${project_name}"
}

# Remove a Key from a Project
# @param $1 - Project Directory
# @param $2 - Key Name
remove_key ()
{
	project_name=$1
	key_name=$2

	# If project_name is empty exit.
	if [[ -z "${project_name}" ]]; then
		return 0
	fi

	# Add Project To SSH Proxy
	add_project $project_name

	# If project_directory doesn't exist exit.
	project_directory=${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}
	if [[ ! -d ${project_directory} ]]; then
		return 0
	fi

	keys_file=${project_directory}/keys/${key_name}
	rm -f $keys_file || true

	# Rebuild Keys for project.
	rebuild_project_keys $project_name
	log "Removed key ${key_name} from ${project_name}"
}

# List Keys For Project
# @param $1 - Project Directory
list_keys ()
{
	project_name=$1
	# If project_name is empty exit.
	if [[ -z "${project_name}" ]]; then
		return 0
	fi

	# If project_directory doesn't exist exit.
	project_directory=${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}
	if [[ ! -d ${project_directory} ]]; then
		return 0
	fi

	while read key; do
		if [[ -n "${key}" ]]; then
			key_value=$(cat "${project_directory}/keys/${key}");
			echo "${key}: ${key_value}"
		fi
	done <<< $(ls -1 ${project_directory}/keys)
}

# Add Key to Authorized Keys File. Used for global.
# @param $1 - SSH Public Key
# @param $2 - Key Name
add_global_key ()
{
	local key=$1
	local key_name=${2:-"global-${RANDOM}"}
	local key_file="${SSH_PROXY_GLOBAL_KEYS}/${key_name}"
	if [[ ! -f "${key_file}" ]]; then
		echo "${key}" > ${key_file}
		log "Added key to Globals"

		log "Rebuilding all keys"
		rebuild_all_keys
	fi
}

# Remove a Key from a Project
# @param $1 - Key Name
remove_global_key ()
{
	key_name=$1

	keys_file=${SSH_PROXY_GLOBAL_KEYS}/${key_name}
	rm -f $keys_file || true
	log "Removed key ${key_name} from global."

	# Rebuild all SSH Keys Authorized
	log "Rebuilding all keys"
	rebuild_all_keys
}

# List Global Keys For Project
list_global_keys ()
{
	while read key; do
		if [[ -n "${key}" ]]; then
			key_value=$(cat "${SSH_PROXY_GLOBAL_KEYS}/${key}");
			echo "${key}: ${key_value}"
		fi
	done <<< $(ls -1 ${SSH_PROXY_GLOBAL_KEYS})
}

# Rebuild keys for a project
# @param $1 - Project Directory
rebuild_project_keys ()
{
	project_name=$1

	# If project_name is empty exit.
	if [[ -z "${project_name}" ]]; then
		return 0
	fi

	project_directory=${SSH_PROXY_UPSTREAM_WORKINGDIR}/${project_name}
	if [[ ! -d ${project_directory} ]]; then
		return 0
	fi

	keys_file=${project_directory}/keys/

	# Add both Global Keys and Project Keys into the authorized_keys file
	keys_file_all=${project_directory}/authorized_keys

	# Reset the Keys File.
	echo "" > ${keys_file_all}

	# Loop through all global keys and add to the authorized keys.
	while read key; do
		if [[ -n "${key}" ]]; then
			cat "${SSH_PROXY_GLOBAL_KEYS}/${key}" >> ${keys_file_all}
		fi
	done <<< $(ls -1 ${SSH_PROXY_GLOBAL_KEYS})

	# Loop through all project keys and add the authorized keys.
	while read key; do
		if [[ -n "${key}" ]]; then
			cat "${project_directory}/keys/${key}" >> ${keys_file_all}
		fi
	done <<< $(ls -1 ${project_directory}/keys)

	# Set Permissions of the Authorized Keys
	chmod 400 ${keys_file_all}
}

# Loop through projects and rebuild the keys.
rebuild_all_keys ()
{
	while read project_name; do
		rebuild_project_keys $project_name
	done <<< $(ls -1 ${SSH_PROXY_UPSTREAM_WORKINGDIR})
}

# Helper for writing log messages
# @param $@ Log message
log ()
{
	echo "$(date +"%F %H:%M:%S") [proxyctl] ${LOG_PREFIX} $@"
}

# Rebuild the configuration by replacing the variables.
rebuild_config ()
{
	local config_file=/etc/sshpiperd.ini
	rm -f ${config_file} || true
	cp ${config_file}.template ${config_file}
	sed -i "s|\${SSH_PROXY_SERVERKEY}|${SSH_PROXY_SERVERKEY}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_LOGLEVEL}|${SSH_PROXY_LOGLEVEL}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_UPSTREAM_WORKINGDIR}|${SSH_PROXY_UPSTREAM_WORKINGDIR}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_UPSTREAM_ALLOWBADUSERNAME}|${SSH_PROXY_UPSTREAM_ALLOWBADUSERNAME}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_UPSTREAM_NOCHECKPERM}|${SSH_PROXY_UPSTREAM_NOCHECKPERM}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_UPSTREAM_FALLBACKUSERNAME}|${SSH_PROXY_UPSTREAM_FALLBACKUSERNAME}|g" ${config_file}
	sed -i "s|\${SSH_PROXY_UPSTREAM_STRICTHOSTKEY}|${SSH_PROXY_UPSTREAM_STRICTHOSTKEY}|g" ${config_file}
}

printh ()
{
	local COMMAND_COLUMN_WIDTH=${4:-45};
	case "$3" in
		yellow)
			printf "  ${yellow}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
			echo -e "	$2"
			;;
		green)
			printf "  ${green}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
			echo -e "	$2"
			;;
		*)
			printf "  %-${COMMAND_COLUMN_WIDTH}s" "$1"
			echo -e "	$2"
			;;
	esac

}

# Usage command
usage ()
{
	local script=$(basename $0)
	echo "Control Docksal SSH Proxy"
	echo
	printh "${script} [command]"
	echo
	echo "Commands:"
	printh "restart" "Restart Proxy Service Internally"
	printh "rebuild-config" "Rebuild Configuration from variables"
	printh "networks" "Add proxy to all available project networks"
	printh "cleanup" "Delete all keys and project configuration"
	printh "cron" "Run cron and connect ssh proxy to each available network"
	printh "rebuild" "Delete all projects reconnect all active projects"
	echo
	printh "add-global-key [key] <key_name>" "Add a key to the global list"
	printh "remove-global-key [key-name]" "Remove a specific key from the global list"
	printh "list-global-keys" "List all Global Keys"
	echo
	printh "add-project [project-name]" "Add a project "
	printh "remove-project [project-name]" "Remove project from the proxy"
	printh "list-projects" "List all projects currently installed on proxy"
	echo
	printh "add-key [project-name] [key] <key_name>" "Add a key for a project"
	printh "remove-key [project-name] [key_name]" "Remove a specific key"
	printh "list-keys [project-name]" "List all the keys installed for a project"
	echo
	echo "Examples:"
	printh "${script} add-key testproject \"ssh-rsa ....\" test-key" "Add key to testproject Project" "normal" 65
	printh "${script} remove testproject test-key" "Remove test-key key from testproject Project" "normal" 65
	printh "${script} networks" "Network all running containers to the proxy" "normal" 65
	echo
}

#-------------------------- RUNTIME STARTS HERE ----------------------------

# Parse other parameters
case "$1" in
	restart)
		supervisorctl restart sshpiperd
		;;
	rebuild-config)
		rebuild_config
		;;
	networks)
		networks
		;;
	cleanup)
		cleanup
		;;
	cron)
		cron
		;;
	add-project)
		shift
		add_project "$1"
		;;
	remove-project)
		shift
		remove_project "$1"
		;;
	list-projects)
		list_projects
		;;
	rebuild)
		rebuild
		;;
	add-key)
		shift
		add_key "$1" "$2" "$3"
		;;
	remove-key)
		shift
		remove_key "$1" "$2"
		;;
	list-keys)
		shift
		list_keys "$1"
		;;
	add-global-key)
		shift
		add_global_key "$1" "$2"
		;;
	remove-global-key)
		shift
		remove_global_key "$1" "$2"
		;;
	list-global-keys)
		list_global_keys
		;;
	*)
		usage
		;;
esac
